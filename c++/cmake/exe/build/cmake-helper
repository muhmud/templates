#!/usr/bin/python

import os
import subprocess
import sys
import xml.etree.ElementTree

buildDirectory = os.path.abspath(os.path.dirname(__file__))

def fixEclipseProject():
    # Load the xml for the eclipse project
    projectXmlFile = os.path.join(buildDirectory, '.project')
    projectXml = xml.etree.ElementTree.parse(projectXmlFile)

    # Fix the project name
    projectName = projectXml.find('name').text;
    projectXml.find('name').text = projectName[0:len(projectName)-12]

    # Add filters
    filtersXml = xml.etree.ElementTree.parse(os.path.join(buildDirectory, 'eclipse-filters.xml')).getroot()
    projectXml.getroot().append(filtersXml)

    # Save the resulting file
    projectXml.write(projectXmlFile)
    
    return

commands = {
    'default' : ['cmake', '../project'],

    'conan' : ['conan', 'install', '../project'],
    
    'debug': ['cmake', '-DCMAKE_BUILD_TYPE=Debug', '../project'],
    
    'release': ['cmake', '-DCMAKE_BUILD_TYPE=Release', '../project'],
    
    'eclipse': ['cmake', '-G',
                         'Eclipse CDT4 - Unix Makefiles',
                         '-DCMAKE_BUILD_TYPE=Debug',
                         '../project'],
    
    'eclipse-src': ['cmake', '-G',
                         'Eclipse CDT4 - Unix Makefiles',
                         '-DCMAKE_BUILD_TYPE=Debug',
                         '-DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE',
                         '../project'],

    'clean': ['find', '.', '!', '-name', 'cmake-helper', '-not', '-name', '.',
              '-not', '-name', '..', '-not', '-name', '.eclipse-filters.xml',
              '-exec', 'rm', '-rf', '{}', '+']
}

if len(sys.argv) <= 1:
    subprocess.call(commands['default'])
    exit()

command = sys.argv[1];
if not command in commands:
    print('Bad argument(s)')
    exit()

# We have a valid command
subprocess.call(commands[command])

# Fix Eclipse project xml, if necessary
if command == 'eclipse':
    fixEclipseProject()

