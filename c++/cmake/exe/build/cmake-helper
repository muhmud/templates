#!/usr/bin/python

import os
import subprocess
import sys
import xml.etree.ElementTree

buildDirectory = os.path.abspath(os.path.dirname(__file__))

def fixEclipseProject():
    # Load the xml for the eclipse project
    projectXmlFile = os.path.join(buildDirectory, '.project')
    projectXml = xml.etree.ElementTree.parse(projectXmlFile)

    # Fix the project name
    projectName = projectXml.find('name').text;
    projectXml.find('name').text = projectName[0:len(projectName)-12]

    # Add filters
    filtersXml = xml.etree.ElementTree.parse(os.path.join(buildDirectory, 'eclipse-filters.xml')).getroot()
    projectXml.getroot().append(filtersXml)

    # Save the resulting file
    projectXml.write(projectXmlFile)
    
    return

commands = {
    'cmake' : { 'description': 'Runs cmake on the project with default options', 'execute' : ['cmake', '../project'] },
    
    'conan' : { 'description': 'Performs a conan install', 'execute' : ['conan', 'install', '../project'] },
    
    'debug': { 'description': 'Runs cmake on the project for a debug build', 'execute' : ['cmake', '-DCMAKE_BUILD_TYPE=Debug', '../project'] },
    
    'release': { 'description' : 'Runs cmake on the project for a release build', 'execute' : ['cmake', '-DCMAKE_BUILD_TYPE=Release', '../project'] },
    
    'eclipse': { 'description': 'Creates an eclipse project for the build', 'execute' : ['cmake', '-G',
                         'Eclipse CDT4 - Unix Makefiles',
                         '-DCMAKE_BUILD_TYPE=Debug',
                         '../project'] },
    
    'eclipse-src': { 'description' : 'Creates an eclipse project for the source', 'execute' : ['cmake', '-G',
                         'Eclipse CDT4 - Unix Makefiles',
                         '-DCMAKE_BUILD_TYPE=Debug',
                         '-DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE',
                         '../project'] },

    'clean': { 'description' : 'Cleans all build files', 'execute' : ['find', '.', '!', '-name', 'cmake-helper', '-not', '-name', '.',
              '-not', '-name', '..', '-not', '-name', '.eclipse-filters.xml',
              '-exec', 'rm', '-rf', '{}', '+'] }
}

def executeCommand(command):
    subprocess.call(commands[command]['execute'])
    

if len(sys.argv) <= 1:
    # Clean
    executeCommand('clean')

    # Conan install
    executeCommand('conan')

    # CMake (debug)
    executeCommand('debug')

    # Eclipse
    executeCommand('eclipse')

    exit()

command = sys.argv[1];
if command == 'help':
    for command, data in commands.items():
        print('%s    \t%s' % (command, data['description']))

    exit()

if not command in commands:
    print('Bad argument(s)')
    exit()

# We have a valid command
executeCommand(command)

# Fix Eclipse project xml, if necessary
if command == 'eclipse':
    fixEclipseProject()

